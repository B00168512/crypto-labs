package tud.b00168512.cryptohack.diffieHellman;

import java.math.BigInteger;
import java.nio.charset.StandardCharsets;

public class ScriptKiddie {

    private static final int g = 2;
    private static final BigInteger p = new BigInteger("2410312426921032588552076022197566074856950548502459942654116941958108831682612228890093858261341614673227141477904012196503648957050582631942730706805009223062734745341073406696246014589361659774041027169249453200378729434170325843778659198143763193776859869524088940195577346119843545301547043747207749969763750084308926339295559968882457872412993810129130294592999947926365264059284647209730384947211681434464714438488520940127459844288859336526896320919633919");
    private static final BigInteger A = new BigInteger("539556019868756019035615487062583764545019803793635712947528463889304486869497162061335997527971977050049337464152478479265992127749780103259420400564906895897077512359628760656227084039215210033374611483959802841868892445902197049235745933150328311259162433075155095844532813412268773066318780724878693701177217733659861396010057464019948199892231790191103752209797118863201066964703008895947360077614198735382678809731252084194135812256359294228383696551949882");
    private static final BigInteger b = new BigInteger("197395083814907028991785772714920885908249341925650951555219049411298436217190605190824934787336279228785809783531814507661385111220639329358048196339626065676869119737979175531770768861808581110311903548567424039264485661330995221907803300824165469977099494284722831845653985392791480264712091293580274947132480402319812110462641143884577706335859190668240694680261160210609506891842793868297672619625924001403035676872189455767944077542198064499486164431451944");
//    private static final BigInteger B = new BigInteger("652888676809466256406904653886313023288609075262748718135045355786028783611182379919130347165201199876762400523413029908630805888567578414109983228590188758171259420566830374793540891937904402387134765200478072915215871011267065310188328883039327167068295517693269989835771255162641401501080811953709743259493453369152994501213224841052509818015422338794357540968552645357127943400146625902468838113443484208599332251406190345653880206706388377388164982846343351");
    private static final BigInteger B = new BigInteger("972796941668199934587482251176070675465918724495521411525280617716411706531135606811525126281117144993038651137027684706557483656812110122896209123024077865543656453010083773353491516542581636833212042720867239318202038657053526419389689689073321477662063882767951189097194561893195969344388961070207160451885424533769285917598034203190284637016100915363456492955839619922504816585700719725969227801782386634573893679146075562222654925160084756476368084976750847");

    public static void main(String[] args) {
        var iv = new BigInteger("c044059ae57b61821a9090fbdefc63c5", 16);
        var encryptedFlag = new BigInteger("f60522a95bde87a9ff00dc2c3d99177019f625f3364188c1058183004506bf96541cf241dad1c0e92535564e537322d7", 16);
        var sharedSecret = generateSharedSecret();
        var res = DerivingSymmetricKeys.decryptFlag(
                sharedSecret,
                hexStringToByteArray("c044059ae57b61821a9090fbdefc63c5"),
                hexStringToByteArray("f60522a95bde87a9ff00dc2c3d99177019f625f3364188c1058183004506bf96541cf241dad1c0e92535564e537322d7")
        );
        System.out.println(new String(res.getBytes(StandardCharsets.US_ASCII)));
    }

    private static BigInteger generateSharedSecret() {
        return A.modPow(B, p);
//        return A.modPow(b, p);
    }

    private static byte[] hexStringToByteArray(String s) {
        int len = s.length();
        byte[] data = new byte[len / 2];
        for (int i = 0; i < len; i += 2) {
            data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4)
                    + Character.digit(s.charAt(i+1), 16));
        }
        return data;
    }
}
