package tud.b00168512.cryptohack.rsa;

import java.math.BigInteger;

public class MonoPrime {

    public static void main(String[] args) {
        var n = new BigInteger("171731371218065444125482536302245915415603318380280392385291836472299752747934607246477508507827284075763910264995326010251268493630501989810855418416643352631102434317900028697993224868629935657273062472544675693365930943308086634291936846505861203914449338007760990051788980485462592823446469606824421932591");
        var e = 65537;
        var ciphertext = new BigInteger("161367550346730604451454756189028938964941280347662098798775466019463375610700074840105776873791605070092554650190486030367121011578171525759600774739890458414593857709994072516290998135846956596662071379067305011746842247628316996977338024343628757374524136260758515864509435302781735938531030576289086798942");

        var phi = n.subtract(BigInteger.ONE);
        var d = BigInteger.valueOf(e).modInverse(phi);

        var res = ciphertext.modPow(d, n);

        System.out.println(new String(res.toByteArray())); // crypto{0n3_pr1m3_41n7_pr1m3_l0l}

    }
}
