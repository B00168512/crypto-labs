package tud.b00168512.cryptohack.rsa;

import java.math.BigInteger;

public class ModulusInUtils {

    public static void main(String[] args) {
        var n = new BigInteger("17258212916191948536348548470938004244269544560039009244721959293554822498047075403658429865201816363311805874117705688359853941515579440852166618074161313773416434156467811969628473425365608002907061241714688204565170146117869742910273064909154666642642308154422770994836108669814632309362483307560217924183202838588431342622551598499747369771295105890359290073146330677383341121242366368309126850094371525078749496850520075015636716490087482193603562501577348571256210991732071282478547626856068209192987351212490642903450263288650415552403935705444809043563866466823492258216747445926536608548665086042098252335883");
        var e = 3;
        var ciphertext = new BigInteger("243251053617903760309941844835411292373350655973075480264001352919865180151222189820473358411037759381328642957324889519192337152355302808400638052620580409813222660643570085177957");

        var p = new BigInteger("17874176842979273918522879702552583966998677247045445616648330928175657614507945458199436445617892550407702510864010937902421885101755171885655151234456658920617340350396559861857871522231252517719507013690008682065031514206568680343052664042200270592322590390286668405845436830456856722412985635482483456261070521537669082958708091682520634814467719484975496055675563441992830404262694919909981043910063872847691163920200993369995387804273229081056094064508088602032411669421910783721344189686981315727554322732831227328785757553278273746468997328516517122408369294246026002005104288252409384021258846368230658331813");

        var totient = p;

        var d = BigInteger.valueOf(e).modInverse(totient);

        var res = ciphertext.modPow(d, n);

        System.out.println(new String(res.toByteArray()));

    }
}
